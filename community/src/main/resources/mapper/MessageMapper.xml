<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.MessageMapper">
    <resultMap id="BaseResultMap" type="com.nowcoder.community.entity.Message">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="from_id" jdbcType="INTEGER" property="fromId"/>
        <result column="to_id" jdbcType="INTEGER" property="toId"/>
        <result column="conversation_id" jdbcType="VARCHAR" property="conversationId"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.nowcoder.community.entity.Message">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
    <sql id="Base_Column_List">
        id
        , from_id, to_id, conversation_id, status, create_time
    </sql>
    <sql id="Blob_Column_List">
        content
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from message
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from message
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.nowcoder.community.entity.Message">
        insert into message (id, from_id, to_id,
                             conversation_id, status, create_time,
                             content)
        values (#{id,jdbcType=INTEGER}, #{fromId,jdbcType=INTEGER}, #{toId,jdbcType=INTEGER},
                #{conversationId,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP},
                #{content,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.nowcoder.community.entity.Message">
        insert into message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="fromId != null">
                from_id,
            </if>
            <if test="toId != null">
                to_id,
            </if>
            <if test="conversationId != null">
                conversation_id,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="fromId != null">
                #{fromId,jdbcType=INTEGER},
            </if>
            <if test="toId != null">
                #{toId,jdbcType=INTEGER},
            </if>
            <if test="conversationId != null">
                #{conversationId,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.nowcoder.community.entity.Message">
        update message
        <set>
            <if test="fromId != null">
                from_id = #{fromId,jdbcType=INTEGER},
            </if>
            <if test="toId != null">
                to_id = #{toId,jdbcType=INTEGER},
            </if>
            <if test="conversationId != null">
                conversation_id = #{conversationId,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.nowcoder.community.entity.Message">
        update message
        set from_id         = #{fromId,jdbcType=INTEGER},
            to_id           = #{toId,jdbcType=INTEGER},
            conversation_id = #{conversationId,jdbcType=VARCHAR},
            status          = #{status,jdbcType=INTEGER},
            create_time     = #{createTime,jdbcType=TIMESTAMP},
            content         = #{content,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.nowcoder.community.entity.Message">
        update message
        set from_id         = #{fromId,jdbcType=INTEGER},
            to_id           = #{toId,jdbcType=INTEGER},
            conversation_id = #{conversationId,jdbcType=VARCHAR},
            status          = #{status,jdbcType=INTEGER},
            create_time     = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectAllConversation" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from message
        WHERE conversation_id NOT IN ("like", "comment", "follow")
    </select>
    <select id="selectAllNotice" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from message
        WHERE conversation_id IN ("like", "comment", "follow")
    </select>

    <select id="selectConversationId" resultType="java.lang.String">
        SELECT conversation_id
        FROM (
            SELECT conversation_id, MAX(create_time) as create_time
            FROM message
            WHERE conversation_id NOT IN ("like", "comment", "follow")
            GROUP BY conversation_id
            ORDER BY create_time DESC
        ) as t
            limit #{offset}
           , #{limit}
    </select>

    <select id="selectConversationRows" resultType="java.lang.Integer">
        SELECT count(*)
        FROM (SELECT conversation_id
              FROM message
              WHERE conversation_id NOT IN ("like", "comment", "follow")
              GROUP BY conversation_id) t
    </select>
    <select id="selectMessgByConversationIdList" parameterType="list" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from message
        <if test="conversationIdList.size() > 0">
            conversation_id in
            <foreach collection="conversationIdList" index="index" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
            order by create_time DESC
        </if>
    </select>

    <!--    #############################################-->

    <select id="selectConversations" resultMap="ResultMapWithBLOBs">
        SELECT
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        FROM message
        WHERE id IN
        (
        SELECT MAX(id)
        FROM message
        WHERE STATUS!= 2
        AND from_id != 1
        AND (from_id=#{userId}
        OR to_id=#{userId})
        GROUP BY conversation_id
        )
        ORDER BY id DESC
        limit #{offset}, #{limit}
    </select>

    <select id="selectConversationCount" resultType="java.lang.Integer">
        select count(m.maxid)
        from (
                 SELECT MAX(id) as maxid
                 FROM message
                 WHERE STATUS!= 2
        AND from_id != 1
        AND (from_id=#{userId}
                    OR to_id=#{userId})
                 GROUP BY conversation_id
             ) as m
    </select>

    <select id="selectLetters" resultMap="ResultMapWithBLOBs">
        SELECT
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        FROM message
        WHERE status!=2
        AND from_id != 1
        AND conversation_id = #{conversationId}
        ORDER BY create_time DESC
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM message
        WHERE status!=2
        AND from_id != 1
        AND conversation_id = #{conversationId}
    </select>

    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM message
        WHERE status = 0
        AND from_id != 1
        AND to_id = #{userId}
        <if test="conversationId != null and conversationId != '' ">
            AND conversation_id = #{conversationId}
        </if>
    </select>

    <update id="updateStatusByMessageList">
        update message
        set status= #{status,jdbcType=INTEGER}
        <where>
            <if test="messageList.size()>0">
                id in
                <foreach collection="messageList" index="index" item="item" open="(" separator="," close=")">
                    #{item.id}
                </foreach>
            </if>
        </where>
    </update>


    <select id="selectUnreadNoticeCount" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM message
        WHERE status = 0
        AND from_id = 1
        AND to_id = #{userId}
        <if test="conversationId != null and conversationId != '' ">
            AND conversation_id = #{conversationId}
        </if>
    </select>


    <select id="selectNoticeByPage" resultMap="ResultMapWithBLOBs">
        SELECT
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        FROM message
        WHERE from_id = 1
        AND status != 2
        AND to_id = #{userId}
        AND conversation_id = #{conversationId}
        ORDER BY create_time DESC
        LIMIT #{offset},#{limit}
    </select>
    <select id="selectNoticeRows" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM message
        WHERE from_id = 1
          AND status != 2
          AND to_id = #{userId}
          AND conversation_id = #{conversationId}
    </select>
</mapper>